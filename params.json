{"name":"Js-class-loader","tagline":"(Java) Fast Javascript aggegator / bundler, with dependency detection.","body":"js-class-loader\r\n===============\r\n\r\n(Java) A Free Software tool for bundling and serving large Javascript codebases with built-in dependency detection. \r\nFast, tested, easy to integrate and does not use the words rockstar or ninja, or have a website filled with big gradient \r\nicons of robot kittens playing banjos. (but then it's not a javascript layout framework so I suppose it wouldn't anyway.)\r\n\r\nRules of JS-Class-Loader\r\n------------------------\r\n\r\n1. Class names must match file names\r\n2. Folder structure must match package structure\r\n3. File names must not have extra dots in them (dashes and underscores are ok though)\r\n\r\nHaving said that, you can still include 3rd party libraries and modules in your bundle that don't conform to this scheme. \r\nYou just need to explicitly include them in your code somewhere, you can't just rely on dependency detection to work out\r\nthat you need them.\r\n\r\nAlso, files can also contain static objects rather than classes. If the object name matches the file name then it will \r\nwork the same way. If it doesn't you will need to include the file explicitly.\r\n\r\nWhat is it?\r\n-----------\r\n\r\nJS-Class-Loader is a java tool for managing large javascript codebases. It is not a generic tool like WRO4J or RequireJS\r\nthat can be used on any codebase given a few modifications. This tool requires your source files to be organised in the\r\nJava style, where folders match package names and filenames match class names. If your code is organised this way then\r\nJS-Class-Loader will detect dependencies without you having to declare them at all, bundle your code or generate script\r\ntags for development, and also provide diagnostics like dependency graphs, lists of unused files and validation that your files\r\ncontain the classes you think they do. (it's all too easy to copy-and-paste a function onto the wrong prototype in JS)\r\n\r\nJS-Class-Loader works as either a command line tool, a Maven Mojo, a Gradle task or a Servlet. The command line or java runners\r\ncan be integrated into any other build system or just used ad-hoc. \r\n\r\nA recommended approach would be to use the servlet for dev and the generated static bundle file for test and production installations.\r\n\r\nIt can be used to manage your own code as well as 3rd party modules. Third party modules may have to be listed as an explicit\r\nimport() but they will be added to the bundle in the same way.\r\n\r\nSee the wiki at http://github.com/damonsmith/js-class-loader for all the info and examples.\r\n\r\nGetting started\r\n---------------\r\n\r\nThe simplest case on the command line:\r\njava -jar js-class-loader.jar --seed-file Main.js --output-file bundle.js\r\n\r\nThis will use Main.js as the seed file, the current folder as the only source folder and generate a bundle of everything\r\nthat is required for Main.js.\r\n\r\nThe way that it works is that it first finds all js files in the current source tree. It then matches package and class \r\nusages in source files to find runtime dependencies. It also parses any use of the extend function to track parse-time\r\ndependencies and make sure they are loaded into the bundle before the subclass that requires them.\r\n\r\nSee the docs for more info on running JS-Class-Loader and integrating it into your app.\r\n\r\nDependency Detection\r\n--------------------\r\n\r\nThe JS-Class-Loader in it's natural state will just detect all of your dependencies starting with a seed file, (either code\r\nor config) generate bundles at request-time for dev and generate static bundles for production.\r\n\r\nThe way it does this is:\r\n1. It looks at the names and paths of all of the files in your configured source locations.\r\n2. Starting with the seeds, it parses any file it finds for a string that looks like a known class type, so if your source path is\r\n\r\n/src\r\n\r\nand you have a file in /src/com/mycompany/tools/Loader.js\r\n\r\nthen if your seed or any other included file uses the string: com.mycompany.tools.Loader then Loader.js will be included in the\r\nbundle.\r\n\r\n3. Parse-time dependencies\r\nOO Javascript usually extends sub-classes at parse time, like this:\r\n\r\n```javascript\r\ncom.mycompany.tools.Loader = function() { /*constructor */ };\r\n \r\nextend(com.mycompany.tools.Loader, com.mycompany.app.BaseLoader);\r\n```\r\n\r\nSo when JS-Class-Loader sees a line like this, it includes src/com/mycompany/app/BaseLoader.js and makes sure it \r\nappears before Loader.js in the bundle file so that the parse time dependency works. \r\n\r\nYou can provide a config file and customise the regex that matches parse-time dependencies too, or provide more and different ones\r\nto customise it to your own syntax.\r\n\r\n\r\nComparison with other tools\r\n---------------------------\r\n\r\nRequireJS is a popular tool for doing this sort of thing. Here are some reasons why this project still exists and isn't\r\nconsidered superceded by requireJS:\r\n\r\nRequireJS needs nodejs or rhino to run and takes a loooong time to generate bundles. Even running from nodejs the docs\r\ntalk about taking 12 seconds to generate a bundle. JS-Class-Loader is so fast that you can hit save on a js file, hit reload on your\r\nbrowser and a few milliseconds later the bundle will be regenerated and served to the page.\r\n\r\nOf course with RequireJS you can lazy load your files in dev mode and have it traverse your dependency tree that way.\r\nFor large codebases that becomes less and less practical, meaning you may find that developers are excited at first at how everything\r\njust works via magic and then more and more frustrated as the project goes on and the dev cycle gets slower and slower.\r\nThis tool provides a solution where - if you can organise your files in a standard Java-like way - then this tool can \r\ndo all the dependency management, dev tooling and development bundling for you very quickly and scale to any size.\r\n\r\nWRO4J also bundles javascript and other web assets and is generally very useful. It does not however provide anything\r\nto manage dependencies. It is fine if you have no parse-time dependencies and you just want to bundle everything, but \r\nif that is not the case then you will end up doing a lot of manual handling of your javascript.\r\n\r\n\r\nHistory of the JS-Class-Loader\r\n------------------------------\r\n\r\nJS-Class-Loader was written as a complete, free and open implementation of tools that exist in-house in many enterprise java development\r\nteams that I have worked in. The tooling is designed to scale to enterprise levels for codebases that have megabytes of js code, \r\ntens of thousands of files, loads of source locations, and is flexible enough that most config files for layouts or app structure\r\ncan be used as seed files.\r\n\r\nThe project started off as a fork of the Caplin Trader javascript bundler but has been rewritten from scratch.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}